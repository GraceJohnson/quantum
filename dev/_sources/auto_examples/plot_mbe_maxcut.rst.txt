
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_mbe_maxcut.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_mbe_maxcut.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_mbe_maxcut.py:


Multi-Basis Encoding
--------------------

Multi-Basis Encoding ([1]_) (MBE) quantum optimization algorithm for MaxCut using TensorLy-Quantum.
TensorLy-Quantum provides a Python interface 
to build TT-tensor network circuit simulator 
for large-scale simulation of variational quantum circuits
with full Autograd support similar to traditional PyTorch Neural Networks.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default



    import tensorly as tl
    import tlquantum as tlq
    from torch import randint, rand, arange, cat, tanh, no_grad
    from torch.optim import Adam
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 21-22

Uncomment the line below to use the GPU

.. GENERATED FROM PYTHON SOURCE LINES 22-35

.. code-block:: default


    #device = 'cuda' 
    device = 'cpu' 

    nepochs = 40 #number of training epochs

    nqubits = 20 #number of qubits
    ncontraq = 2 #2 #number of qubits to pre-contract into single core
    ncontral = 2 #2 #number of layers to pre-contract into a single core
    nterms = 20
    lr = 0.7









.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: default

    state = tlq.spins_to_tt_state([0 for i in range(nqubits)], device) # generate generic zero state |00000>
    state = tlq.qubits_contract(state, ncontraq)









.. GENERATED FROM PYTHON SOURCE LINES 41-44

Here we build a random graph with randomly weighted edges.
Note: MBE allows us to encode two vertices (typically two qubits) into a single qubit using the z and x-axes.
If y-axis included, we can encode three vertices per qubit.

.. GENERATED FROM PYTHON SOURCE LINES 44-51

.. code-block:: default

    vertices1 = randint(2*nqubits, (nterms,), device=device) # randomly generated first qubits (vertices) of each two-qubit term (edge)
    vertices2 = randint(2*nqubits, (nterms,), device=device) # randomly generated second qubits (vertices) of each two-qubit term (edge)
    vertices2[vertices2==vertices1] += 1 # because qubits in this graph are randomly generated, eliminate self-interacting terms
    vertices2[vertices2 >= nqubits] = 0
    weights = rand((nterms,), device=device) # randomly generated edge weights









.. GENERATED FROM PYTHON SOURCE LINES 52-58

.. code-block:: default

    RotY1 = tlq.UnaryGatesUnitary(nqubits, ncontraq, device=device) #single-qubit rotations about the Y-axis
    RotY2 = tlq.UnaryGatesUnitary(nqubits, ncontraq, device=device)
    CZ0 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.cz(device=device), 0) # one controlled-z gate for each pair of qubits using even parity (even qubits control)
    unitaries = [RotY1, CZ0, RotY2]









.. GENERATED FROM PYTHON SOURCE LINES 59-84

.. code-block:: default


    circuit = tlq.TTCircuit(unitaries, ncontraq, ncontral) # build TTCircuit using specified unitaries
    opz, opx = tl.tensor([[1,0],[0,-1]], device=device), tl.tensor([[0,1],[1,0]], device=device) # measurement operators for MBE
    opt = Adam(circuit.parameters(), lr=lr, amsgrad=True) # define PyTorch optimizer
    loss_vec = tl.zeros(nepochs)
    cut_vec = tl.zeros(nepochs)

    for epoch in range(nepochs):
        # TTCircuit forward pass computes expectation value of single-qubit pauli-z and pauli-x measurements
        spinsz, spinsx = circuit.forward_single_qubit(state, opz, opx)
        spins = cat((spinsz, spinsx))
        nl_spins = tanh(spins) # apply non-linear activation function to measurement results
        loss = tlq.calculate_cut(nl_spins, vertices1, vertices2, weights) # calculate the loss function using MBE
        print('Relaxation (raw) loss at epoch ' + str(epoch) + ': ' + str(loss.item()) + '. \n')
        with no_grad():
            cut_vec[epoch] = tlq.calculate_cut(tl.sign(spins), vertices1, vertices2, weights, get_cut=True) #calculate the rounded MaxCut estimate (algorithm's result)
            print('Rounded MaxCut value (algorithm\'s solution): ' + str(cut_vec[epoch]) + '. \n')

        # PyTorch Autograd attends to backwards pass and parameter update
        loss.backward()
        opt.step()
        opt.zero_grad()
        loss_vec[epoch] = loss






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Relaxation (raw) loss at epoch 0: -2.6284494400024414. 

    Rounded MaxCut value (algorithm's solution): tensor(97.8099). 

    Relaxation (raw) loss at epoch 1: -12.783310890197754. 

    Rounded MaxCut value (algorithm's solution): tensor(80.0263). 

    Relaxation (raw) loss at epoch 2: -38.53456115722656. 

    Rounded MaxCut value (algorithm's solution): tensor(142.2690). 

    Relaxation (raw) loss at epoch 3: -51.41071319580078. 

    Rounded MaxCut value (algorithm's solution): tensor(151.1608). 

    Relaxation (raw) loss at epoch 4: -57.42717742919922. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 5: -63.89420700073242. 

    Rounded MaxCut value (algorithm's solution): tensor(160.0526). 

    Relaxation (raw) loss at epoch 6: -67.4400634765625. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 7: -67.58689880371094. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 8: -70.08534240722656. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 9: -72.29042053222656. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 10: -71.80409240722656. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 11: -71.55767822265625. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 12: -73.4901351928711. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 13: -75.02679443359375. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 14: -74.83492279052734. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 15: -74.6458740234375. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 16: -75.63671112060547. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 17: -77.19610595703125. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 18: -78.34722137451172. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 19: -78.65614318847656. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 20: -78.52613830566406. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 21: -78.64408874511719. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 22: -78.69048309326172. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 23: -78.55213165283203. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 24: -78.64849853515625. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 25: -79.02091979980469. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 26: -79.23587036132812. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 27: -79.3052749633789. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 28: -79.5826644897461. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 29: -79.9295883178711. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 30: -80.10233306884766. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 31: -80.21773529052734. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 32: -80.34917449951172. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 33: -80.3924331665039. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 34: -80.26647186279297. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 35: -80.21597290039062. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 36: -80.40888214111328. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 37: -80.52810668945312. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 38: -80.52269744873047. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 

    Relaxation (raw) loss at epoch 39: -80.60596466064453. 

    Rounded MaxCut value (algorithm's solution): tensor(168.9444). 





.. GENERATED FROM PYTHON SOURCE LINES 85-96

.. code-block:: default

    plt.rc('xtick')
    plt.rc('ytick')
    fig, ax1 = plt.subplots()
    ax1.plot(loss_vec.detach().numpy(), color='k')
    ax2 = ax1.twinx()
    ax2.plot(cut_vec.detach().numpy(), color='g')
    ax1.set_xlabel('Epochs')
    ax1.set_ylabel('Loss', color='k')
    ax2.set_ylabel('Cut', color='g')
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_mbe_maxcut_001.png
   :alt: plot mbe maxcut
   :srcset: /auto_examples/images/sphx_glr_plot_mbe_maxcut_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 97-100

References
----------
.. [1] T. L. Patti, J. Kossaifi, A. Anandkumar, and S. F. Yelin, "Variational Quantum Optimization with Multi-Basis Encodings," (2021), arXiv:2106.13304.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.513 seconds)


.. _sphx_glr_download_auto_examples_plot_mbe_maxcut.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mbe_maxcut.py <plot_mbe_maxcut.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mbe_maxcut.ipynb <plot_mbe_maxcut.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
