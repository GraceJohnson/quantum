
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_vqe_transverse_field_Ising.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_vqe_transverse_field_Ising.py:


Variational Quantum Eigensolver
-------------------------------

Variational Quantum Eigensolver ([1]_) (VQE) 
with Transverse Field Ising Model Hamiltonian using TensorLy-Quantum.
TensorLy-Quantum provides a Pythonic API to TT-tensor network circuit simulation
for large-scale simulation of variational quantum circuits,
with full Autograd support and an interface similar to PyTorch Neural Networks.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default


    import tensorly as tl
    import tlquantum as tlq
    from tensorly.tt_matrix import TTMatrix
    from torch import randint, rand, arange
    from torch.optim import Adam
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 21-22

Uncomment the line below to use the GPU

.. GENERATED FROM PYTHON SOURCE LINES 22-35

.. code-block:: default


    #device = 'cuda' 
    device = 'cpu' 

    nepochs = 80 #number of training epochs

    nqubits = 5 #number of qubits
    ncontraq = 2 #2 #number of qubits to pre-contract into single core
    ncontral = 2 #2 #number of layers to pre-contract into a single core
    nterms = 10
    lr = 0.5









.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: default

    state = tlq.spins_to_tt_state([0 for i in range(nqubits)], device) # generate generic zero state |00000>
    state = tlq.qubits_contract(state, ncontraq)









.. GENERATED FROM PYTHON SOURCE LINES 41-43

Here we build a random spin-spin and transverse field weights.
two-qubit terms

.. GENERATED FROM PYTHON SOURCE LINES 43-50

.. code-block:: default

    qubits1 = randint(nqubits, (nterms,), device=device) # randomly generated first qubits of each two-qubit term
    qubits2 = randint(nqubits, (nterms,), device=device) # randomly generated second qubits of each two-qubit term
    qubits2[qubits2==qubits1] += 1 # because qubits in this Hamiltonian randomly generated, eliminate self-interacting terms
    qubits2[qubits2 >= nqubits] = 0
    weights = rand((nterms,), device=device) # randomly generated coefficients of each two-qubit interaction in Hamiltonian
    binary_H = tlq.binary_hamiltonian(tlq.pauli_z(device), nqubits, qubits1, qubits2, weights) # build the spin-spin Hamiltonian H








.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: default

    qubits = arange(nqubits, device=device) # specify that each qubit will have a transverse field term
    weights = rand((nqubits,), device=device) # randomly generated coefficients for the transverse field felt by each qubit
    unary_H = tlq.unary_hamiltonian(tlq.pauli_x(device), nqubits, qubits, weights) #build the transverse field Hamiltonian








.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: default

    Ising_H = tlq.tt_matrix_sum(binary_H, unary_H)









.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: default

    custom_U = tlq.Unitary([tlq.RotY(device), *tlq.so4(0,1, device), tlq.RotY(device), *tlq.so4(2, 3, device)], nqubits, ncontraq)








.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: default

    RotY = tlq.UnaryGatesUnitary(nqubits, ncontraq, device=device) # one Y-axis rotation gate applied to each qubit of the circuit
    parity = 0
    CZ0 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.cz(device=device), parity) # one controlled-z gate for each pair of qubits using even parity (even qubits control)
    parity = 1
    SO4_01 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.so4(2,3, device=device), parity) # one SO4 rotation about two-qubit states |2> and |3> with odd parity









.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: default

    unitaries = [RotY, SO4_01, tlq.UnaryGatesUnitary(nqubits, ncontraq, device=device), CZ0]








.. GENERATED FROM PYTHON SOURCE LINES 78-83

.. code-block:: default

    repeat_block, unitaries_automatic = 3, []
    for i in range(repeat_block):
        unitaries_automatic += unitaries









.. GENERATED FROM PYTHON SOURCE LINES 86-102

.. code-block:: default

    circuit = tlq.TTCircuit(unitaries, ncontraq, ncontral)
    opt = Adam(circuit.parameters(), lr=lr, amsgrad=True) # define PyTorch optimizer
    energy_vec = tl.zeros(nepochs)

    for epoch in range(nepochs):
        # TTCircuit forward pass computes expectation value of Ising_H
        energy = circuit.forward_expectation_value(state, Ising_H)
        print('Energy (loss) at epoch ' + str(epoch) + ' is ' + str(energy[0].item()) + '. \n')

        # PyTorch Autograd attends to backwards pass and parameter update
        energy.backward()
        opt.step()
        opt.zero_grad(epoch)
        energy_vec[epoch] = energy






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy (loss) at epoch 0 is 0.896763801574707. 

    Energy (loss) at epoch 1 is -2.7013626098632812. 

    Energy (loss) at epoch 2 is -1.9025306701660156. 

    Energy (loss) at epoch 3 is -1.9091427326202393. 

    Energy (loss) at epoch 4 is -2.106288433074951. 

    Energy (loss) at epoch 5 is -2.7773666381835938. 

    Energy (loss) at epoch 6 is -3.371051073074341. 

    Energy (loss) at epoch 7 is -4.045795917510986. 

    Energy (loss) at epoch 8 is -4.57728910446167. 

    Energy (loss) at epoch 9 is -4.0243120193481445. 

    Energy (loss) at epoch 10 is -3.881993293762207. 

    Energy (loss) at epoch 11 is -3.8908979892730713. 

    Energy (loss) at epoch 12 is -4.028070449829102. 

    Energy (loss) at epoch 13 is -4.420962810516357. 

    Energy (loss) at epoch 14 is -4.461758613586426. 

    Energy (loss) at epoch 15 is -4.554015636444092. 

    Energy (loss) at epoch 16 is -4.570929050445557. 

    Energy (loss) at epoch 17 is -4.509138107299805. 

    Energy (loss) at epoch 18 is -4.553098201751709. 

    Energy (loss) at epoch 19 is -4.554160118103027. 

    Energy (loss) at epoch 20 is -4.546130657196045. 

    Energy (loss) at epoch 21 is -4.6983418464660645. 

    Energy (loss) at epoch 22 is -4.827508449554443. 

    Energy (loss) at epoch 23 is -4.806768417358398. 

    Energy (loss) at epoch 24 is -4.773863315582275. 

    Energy (loss) at epoch 25 is -4.727465629577637. 

    Energy (loss) at epoch 26 is -4.7084126472473145. 

    Energy (loss) at epoch 27 is -4.7708258628845215. 

    Energy (loss) at epoch 28 is -4.79745626449585. 

    Energy (loss) at epoch 29 is -4.842138290405273. 

    Energy (loss) at epoch 30 is -4.883788585662842. 

    Energy (loss) at epoch 31 is -4.849903106689453. 

    Energy (loss) at epoch 32 is -4.830090522766113. 

    Energy (loss) at epoch 33 is -4.843017578125. 

    Energy (loss) at epoch 34 is -4.8448486328125. 

    Energy (loss) at epoch 35 is -4.862747669219971. 

    Energy (loss) at epoch 36 is -4.898078918457031. 

    Energy (loss) at epoch 37 is -4.901601314544678. 

    Energy (loss) at epoch 38 is -4.8924384117126465. 

    Energy (loss) at epoch 39 is -4.888337135314941. 

    Energy (loss) at epoch 40 is -4.878840446472168. 

    Energy (loss) at epoch 41 is -4.8918633460998535. 

    Energy (loss) at epoch 42 is -4.905531406402588. 

    Energy (loss) at epoch 43 is -4.909165859222412. 

    Energy (loss) at epoch 44 is -4.918500900268555. 

    Energy (loss) at epoch 45 is -4.912970542907715. 

    Energy (loss) at epoch 46 is -4.9064836502075195. 

    Energy (loss) at epoch 47 is -4.909859657287598. 

    Energy (loss) at epoch 48 is -4.9130167961120605. 

    Energy (loss) at epoch 49 is -4.921782970428467. 

    Energy (loss) at epoch 50 is -4.92592716217041. 

    Energy (loss) at epoch 51 is -4.922515392303467. 

    Energy (loss) at epoch 52 is -4.921759605407715. 

    Energy (loss) at epoch 53 is -4.918905258178711. 

    Energy (loss) at epoch 54 is -4.921422958374023. 

    Energy (loss) at epoch 55 is -4.926379680633545. 

    Energy (loss) at epoch 56 is -4.9279961585998535. 

    Energy (loss) at epoch 57 is -4.929619789123535. 

    Energy (loss) at epoch 58 is -4.926938056945801. 

    Energy (loss) at epoch 59 is -4.925951957702637. 

    Energy (loss) at epoch 60 is -4.927253723144531. 

    Energy (loss) at epoch 61 is -4.928471565246582. 

    Energy (loss) at epoch 62 is -4.931317329406738. 

    Energy (loss) at epoch 63 is -4.931023120880127. 

    Energy (loss) at epoch 64 is -4.930204391479492. 

    Energy (loss) at epoch 65 is -4.929747581481934. 

    Energy (loss) at epoch 66 is -4.929619789123535. 

    Energy (loss) at epoch 67 is -4.931283473968506. 

    Energy (loss) at epoch 68 is -4.931788444519043. 

    Energy (loss) at epoch 69 is -4.9323906898498535. 

    Energy (loss) at epoch 70 is -4.931852340698242. 

    Energy (loss) at epoch 71 is -4.931286811828613. 

    Energy (loss) at epoch 72 is -4.931793689727783. 

    Energy (loss) at epoch 73 is -4.932135581970215. 

    Energy (loss) at epoch 74 is -4.9328813552856445. 

    Energy (loss) at epoch 75 is -4.932765007019043. 

    Energy (loss) at epoch 76 is -4.93259859085083. 

    Energy (loss) at epoch 77 is -4.9323859214782715. 

    Energy (loss) at epoch 78 is -4.932547569274902. 

    Energy (loss) at epoch 79 is -4.933053016662598. 





.. GENERATED FROM PYTHON SOURCE LINES 103-116

.. code-block:: default

    Ising_H = TTMatrix(Ising_H).to_matrix()
    true_energies, _ = tl.eigh(Ising_H)
    ground_state_energy = true_energies[0]
    plt.figure()
    plt.plot(energy_vec.detach().cpu().numpy(), color='r')
    plt.hlines(ground_state_energy.detach().cpu().numpy(), 0, nepochs, color='k', linestyle='--')
    plt.xlabel('Epochs')
    plt.ylabel('Energy')
    plt.xticks()
    plt.yticks()
    plt.legend(['Variational Solution', 'Ground Truth'])
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :alt: plot vqe transverse field Ising
   :srcset: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 117-120

References
----------
.. [1] Peruzzo, A., McClean, J., Shadbolt, P. et al. A variational eigenvalue solver on a photonic quantum processor. Nat Commun 5, 4213 (2014). 


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.532 seconds)


.. _sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_vqe_transverse_field_Ising.py <plot_vqe_transverse_field_Ising.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_vqe_transverse_field_Ising.ipynb <plot_vqe_transverse_field_Ising.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
