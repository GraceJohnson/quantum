
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_vqe_transverse_field_Ising.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_vqe_transverse_field_Ising.py:


Variational Quantum Eigensolver
-------------------------------

Variational Quantum Eigensolver ([1]_) (VQE) 
with Transverse Field Ising Model Hamiltonian using TensorLy-Quantum.
TensorLy-Quantum provides a Pythonic API to TT-tensor network circuit simulation
for large-scale simulation of variational quantum circuits,
with full Autograd support and an interface similar to PyTorch Neural Networks.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default


    import tensorly as tl
    import tlquantum as tlq
    from tensorly.tt_matrix import TTMatrix
    from torch import randint, rand, arange
    from torch.optim import Adam
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 21-22

Uncomment the line below to use the GPU

.. GENERATED FROM PYTHON SOURCE LINES 22-35

.. code-block:: default


    #device = 'cuda' 
    device = 'cpu' 

    nepochs = 80 #number of training epochs

    nqubits = 5 #number of qubits
    ncontraq = 2 #2 #number of qubits to pre-contract into single core
    ncontral = 2 #2 #number of layers to pre-contract into a single core
    nterms = 10
    lr = 0.5









.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: default

    state = tlq.spins_to_tt_state([0 for i in range(nqubits)], device) # generate generic zero state |00000>
    state = tlq.qubits_contract(state, ncontraq)









.. GENERATED FROM PYTHON SOURCE LINES 41-43

Here we build a random spin-spin and transverse field weights.
two-qubit terms

.. GENERATED FROM PYTHON SOURCE LINES 43-50

.. code-block:: default

    qubits1 = randint(nqubits, (nterms,), device=device) # randomly generated first qubits of each two-qubit term
    qubits2 = randint(nqubits, (nterms,), device=device) # randomly generated second qubits of each two-qubit term
    qubits2[qubits2==qubits1] += 1 # because qubits in this Hamiltonian randomly generated, eliminate self-interacting terms
    qubits2[qubits2 >= nqubits] = 0
    weights = rand((nterms,), device=device) # randomly generated coefficients of each two-qubit interaction in Hamiltonian
    binary_H = tlq.binary_hamiltonian(tlq.pauli_z(device), nqubits, qubits1, qubits2, weights) # build the spin-spin Hamiltonian H








.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: default

    qubits = arange(nqubits, device=device) # specify that each qubit will have a transverse field term
    weights = rand((nqubits,), device=device) # randomly generated coefficients for the transverse field felt by each qubit
    unary_H = tlq.unary_hamiltonian(tlq.pauli_x(device), nqubits, qubits, weights) #build the transverse field Hamiltonian








.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: default

    Ising_H = tlq.tt_matrix_sum(binary_H, unary_H)









.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: default

    custom_U = tlq.Unitary([tlq.RotY(device), *tlq.so4(0,1, device), tlq.RotY(device), *tlq.so4(2, 3, device)], nqubits, ncontraq)








.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: default

    RotY = tlq.UnaryGatesUnitary(nqubits, ncontraq, device=device) # one Y-axis rotation gate applied to each qubit of the circuit
    parity = 0
    CZ0 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.cz(device=device), parity) # one controlled-z gate for each pair of qubits using even parity (even qubits control)
    parity = 1
    SO4_01 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.so4(2,3, device=device), parity) # one SO4 rotation about two-qubit states |2> and |3> with odd parity









.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: default

    unitaries = [RotY, SO4_01, tlq.UnaryGatesUnitary(nqubits, ncontraq, device=device), CZ0]








.. GENERATED FROM PYTHON SOURCE LINES 78-83

.. code-block:: default

    repeat_block, unitaries_automatic = 3, []
    for i in range(repeat_block):
        unitaries_automatic += unitaries









.. GENERATED FROM PYTHON SOURCE LINES 86-102

.. code-block:: default

    circuit = tlq.TTCircuit(unitaries, ncontraq, ncontral)
    opt = Adam(circuit.parameters(), lr=lr, amsgrad=True) # define PyTorch optimizer
    energy_vec = tl.zeros(nepochs)

    for epoch in range(nepochs):
        # TTCircuit forward pass computes expectation value of Ising_H
        energy = circuit.forward_expectation_value(state, Ising_H)
        print('Energy (loss) at epoch ' + str(epoch) + ' is ' + str(energy[0].item()) + '. \n')

        # PyTorch Autograd attends to backwards pass and parameter update
        energy.backward()
        opt.step()
        opt.zero_grad(epoch)
        energy_vec[epoch] = energy






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy (loss) at epoch 0 is 0.35286226868629456. 

    Energy (loss) at epoch 1 is 0.11432325839996338. 

    Energy (loss) at epoch 2 is -0.8854392766952515. 

    Energy (loss) at epoch 3 is -1.9031805992126465. 

    Energy (loss) at epoch 4 is -2.8604869842529297. 

    Energy (loss) at epoch 5 is -3.249041795730591. 

    Energy (loss) at epoch 6 is -3.4797170162200928. 

    Energy (loss) at epoch 7 is -3.6749234199523926. 

    Energy (loss) at epoch 8 is -4.315454006195068. 

    Energy (loss) at epoch 9 is -4.4944071769714355. 

    Energy (loss) at epoch 10 is -4.137401580810547. 

    Energy (loss) at epoch 11 is -3.8999099731445312. 

    Energy (loss) at epoch 12 is -3.959174633026123. 

    Energy (loss) at epoch 13 is -4.259740829467773. 

    Energy (loss) at epoch 14 is -4.513095378875732. 

    Energy (loss) at epoch 15 is -4.539089679718018. 

    Energy (loss) at epoch 16 is -4.450244903564453. 

    Energy (loss) at epoch 17 is -4.378736972808838. 

    Energy (loss) at epoch 18 is -4.381353855133057. 

    Energy (loss) at epoch 19 is -4.456562519073486. 

    Energy (loss) at epoch 20 is -4.529877185821533. 

    Energy (loss) at epoch 21 is -4.5504679679870605. 

    Energy (loss) at epoch 22 is -4.567878246307373. 

    Energy (loss) at epoch 23 is -4.6331706047058105. 

    Energy (loss) at epoch 24 is -4.6638007164001465. 

    Energy (loss) at epoch 25 is -4.601419448852539. 

    Energy (loss) at epoch 26 is -4.539060592651367. 

    Energy (loss) at epoch 27 is -4.588852405548096. 

    Energy (loss) at epoch 28 is -4.692371845245361. 

    Energy (loss) at epoch 29 is -4.715719699859619. 

    Energy (loss) at epoch 30 is -4.671850681304932. 

    Energy (loss) at epoch 31 is -4.658549785614014. 

    Energy (loss) at epoch 32 is -4.68310022354126. 

    Energy (loss) at epoch 33 is -4.6893205642700195. 

    Energy (loss) at epoch 34 is -4.676673889160156. 

    Energy (loss) at epoch 35 is -4.684243679046631. 

    Energy (loss) at epoch 36 is -4.710770130157471. 

    Energy (loss) at epoch 37 is -4.72554349899292. 

    Energy (loss) at epoch 38 is -4.722444534301758. 

    Energy (loss) at epoch 39 is -4.716107368469238. 

    Energy (loss) at epoch 40 is -4.7128214836120605. 

    Energy (loss) at epoch 41 is -4.71507453918457. 

    Energy (loss) at epoch 42 is -4.724740505218506. 

    Energy (loss) at epoch 43 is -4.731003761291504. 

    Energy (loss) at epoch 44 is -4.725940704345703. 

    Energy (loss) at epoch 45 is -4.724460124969482. 

    Energy (loss) at epoch 46 is -4.73636531829834. 

    Energy (loss) at epoch 47 is -4.743655204772949. 

    Energy (loss) at epoch 48 is -4.73574161529541. 

    Energy (loss) at epoch 49 is -4.730616569519043. 

    Energy (loss) at epoch 50 is -4.737227439880371. 

    Energy (loss) at epoch 51 is -4.740490436553955. 

    Energy (loss) at epoch 52 is -4.735815525054932. 

    Energy (loss) at epoch 53 is -4.736509323120117. 

    Energy (loss) at epoch 54 is -4.743719100952148. 

    Energy (loss) at epoch 55 is -4.745886325836182. 

    Energy (loss) at epoch 56 is -4.742626190185547. 

    Energy (loss) at epoch 57 is -4.741430282592773. 

    Energy (loss) at epoch 58 is -4.74271297454834. 

    Energy (loss) at epoch 59 is -4.7436652183532715. 

    Energy (loss) at epoch 60 is -4.743988990783691. 

    Energy (loss) at epoch 61 is -4.743496894836426. 

    Energy (loss) at epoch 62 is -4.74315881729126. 

    Energy (loss) at epoch 63 is -4.744692325592041. 

    Energy (loss) at epoch 64 is -4.746090412139893. 

    Energy (loss) at epoch 65 is -4.745433330535889. 

    Energy (loss) at epoch 66 is -4.745356559753418. 

    Energy (loss) at epoch 67 is -4.746638298034668. 

    Energy (loss) at epoch 68 is -4.746340751647949. 

    Energy (loss) at epoch 69 is -4.74504280090332. 

    Energy (loss) at epoch 70 is -4.745561122894287. 

    Energy (loss) at epoch 71 is -4.746624946594238. 

    Energy (loss) at epoch 72 is -4.7462873458862305. 

    Energy (loss) at epoch 73 is -4.745980262756348. 

    Energy (loss) at epoch 74 is -4.746537685394287. 

    Energy (loss) at epoch 75 is -4.746823310852051. 

    Energy (loss) at epoch 76 is -4.746768474578857. 

    Energy (loss) at epoch 77 is -4.746885299682617. 

    Energy (loss) at epoch 78 is -4.746910572052002. 

    Energy (loss) at epoch 79 is -4.746841907501221. 





.. GENERATED FROM PYTHON SOURCE LINES 103-116

.. code-block:: default

    Ising_H = TTMatrix(Ising_H).to_matrix()
    true_energies, _ = tl.eigh(Ising_H)
    ground_state_energy = true_energies[0]
    plt.figure()
    plt.plot(energy_vec.detach().numpy(), color='r')
    plt.hlines(ground_state_energy, 0, nepochs, color='k', linestyle='--')
    plt.xlabel('Epochs')
    plt.ylabel('Energy')
    plt.xticks()
    plt.yticks()
    plt.legend(['Variational Solution', 'Ground Truth'])
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :alt: plot vqe transverse field Ising
   :srcset: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 117-120

References
----------
.. [1] Peruzzo, A., McClean, J., Shadbolt, P. et al. A variational eigenvalue solver on a photonic quantum processor. Nat Commun 5, 4213 (2014). 


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.626 seconds)


.. _sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_vqe_transverse_field_Ising.py <plot_vqe_transverse_field_Ising.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_vqe_transverse_field_Ising.ipynb <plot_vqe_transverse_field_Ising.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
