
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_vqe_transverse_field_Ising.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_vqe_transverse_field_Ising.py:


Variational Quantum Eigensolver
-------------------------------

Variational Quantum Eigensolver ([1]_) (VQE) 
with Transverse Field Ising Model Hamiltonian using TensorLy-Quantum.
TensorLy-Quantum provides a Pythonic API to TT-tensor network circuit simulation
for large-scale simulation of variational quantum circuits,
with full Autograd support and an interface similar to PyTorch Neural Networks.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default


    import tensorly as tl
    import tlquantum as tlq
    from tensorly.tt_matrix import TTMatrix
    from torch import randint, rand, arange
    from torch.optim import Adam
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 21-22

Uncomment the line below to use the GPU

.. GENERATED FROM PYTHON SOURCE LINES 22-35

.. code-block:: default


    #device = 'cuda' 
    device = 'cpu' 

    nepochs = 80 #number of training epochs

    nqubits = 5 #number of qubits
    ncontraq = 2 #2 #number of qubits to pre-contract into single core
    ncontral = 2 #2 #number of layers to pre-contract into a single core
    nterms = 10
    lr = 0.5









.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: default

    state = tlq.spins_to_tt_state([0 for i in range(nqubits)], device) # generate generic zero state |00000>
    state = tlq.qubits_contract(state, ncontraq)









.. GENERATED FROM PYTHON SOURCE LINES 41-43

Here we build a random spin-spin and transverse field weights.
two-qubit terms

.. GENERATED FROM PYTHON SOURCE LINES 43-50

.. code-block:: default

    qubits1 = randint(nqubits, (nterms,), device=device) # randomly generated first qubits of each two-qubit term
    qubits2 = randint(nqubits, (nterms,), device=device) # randomly generated second qubits of each two-qubit term
    qubits2[qubits2==qubits1] += 1 # because qubits in this Hamiltonian randomly generated, eliminate self-interacting terms
    qubits2[qubits2 >= nqubits] = 0
    weights = rand((nterms,), device=device) # randomly generated coefficients of each two-qubit interaction in Hamiltonian
    binary_H = tlq.binary_hamiltonian(tlq.pauli_z(device), nqubits, qubits1, qubits2, weights) # build the spin-spin Hamiltonian H








.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: default

    qubits = arange(nqubits, device=device) # specify that each qubit will have a transverse field term
    weights = rand((nqubits,), device=device) # randomly generated coefficients for the transverse field felt by each qubit
    unary_H = tlq.unary_hamiltonian(tlq.pauli_x(device), nqubits, qubits, weights) #build the transverse field Hamiltonian








.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: default

    Ising_H = tlq.tt_matrix_sum(binary_H, unary_H)









.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: default

    custom_U = tlq.Unitary([tlq.RotY(device), *tlq.so4(0,1, device), tlq.RotY(device), *tlq.so4(2, 3, device)], nqubits, ncontraq)








.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: default

    RotY = tlq.UnaryGatesUnitary(nqubits, ncontraq, device=device) # one Y-axis rotation gate applied to each qubit of the circuit
    parity = 0
    CZ0 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.cz(device=device), parity) # one controlled-z gate for each pair of qubits using even parity (even qubits control)
    parity = 1
    SO4_01 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.so4(2,3, device=device), parity) # one SO4 rotation about two-qubit states |2> and |3> with odd parity









.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: default

    unitaries = [RotY, SO4_01, tlq.UnaryGatesUnitary(nqubits, ncontraq, device=device), CZ0]








.. GENERATED FROM PYTHON SOURCE LINES 78-83

.. code-block:: default

    repeat_block, unitaries_automatic = 3, []
    for i in range(repeat_block):
        unitaries_automatic += unitaries









.. GENERATED FROM PYTHON SOURCE LINES 86-102

.. code-block:: default

    circuit = tlq.TTCircuit(unitaries, ncontraq, ncontral)
    opt = Adam(circuit.parameters(), lr=lr, amsgrad=True) # define PyTorch optimizer
    energy_vec = tl.zeros(nepochs)

    for epoch in range(nepochs):
        # TTCircuit forward pass computes expectation value of Ising_H
        energy = circuit.forward_expectation_value(state, Ising_H)
        print('Energy (loss) at epoch ' + str(epoch) + ' is ' + str(energy[0].item()) + '. \n')

        # PyTorch Autograd attends to backwards pass and parameter update
        energy.backward()
        opt.step()
        opt.zero_grad(epoch)
        energy_vec[epoch] = energy






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy (loss) at epoch 0 is -1.1995642185211182. 

    Energy (loss) at epoch 1 is -1.471590280532837. 

    Energy (loss) at epoch 2 is -3.0333518981933594. 

    Energy (loss) at epoch 3 is -2.301276683807373. 

    Energy (loss) at epoch 4 is -2.2908430099487305. 

    Energy (loss) at epoch 5 is -2.3512942790985107. 

    Energy (loss) at epoch 6 is -2.718966245651245. 

    Energy (loss) at epoch 7 is -3.2184247970581055. 

    Energy (loss) at epoch 8 is -3.322808027267456. 

    Energy (loss) at epoch 9 is -2.9401299953460693. 

    Energy (loss) at epoch 10 is -2.785468578338623. 

    Energy (loss) at epoch 11 is -2.949887275695801. 

    Energy (loss) at epoch 12 is -3.160315990447998. 

    Energy (loss) at epoch 13 is -3.318488121032715. 

    Energy (loss) at epoch 14 is -3.3633739948272705. 

    Energy (loss) at epoch 15 is -3.2427618503570557. 

    Energy (loss) at epoch 16 is -3.133254051208496. 

    Energy (loss) at epoch 17 is -3.162856340408325. 

    Energy (loss) at epoch 18 is -3.250765800476074. 

    Energy (loss) at epoch 19 is -3.3312911987304688. 

    Energy (loss) at epoch 20 is -3.3931591510772705. 

    Energy (loss) at epoch 21 is -3.3826141357421875. 

    Energy (loss) at epoch 22 is -3.3077080249786377. 

    Energy (loss) at epoch 23 is -3.280749797821045. 

    Energy (loss) at epoch 24 is -3.3136887550354004. 

    Energy (loss) at epoch 25 is -3.3568973541259766. 

    Energy (loss) at epoch 26 is -3.3996801376342773. 

    Energy (loss) at epoch 27 is -3.4102091789245605. 

    Energy (loss) at epoch 28 is -3.381669521331787. 

    Energy (loss) at epoch 29 is -3.3663454055786133. 

    Energy (loss) at epoch 30 is -3.3673086166381836. 

    Energy (loss) at epoch 31 is -3.37384033203125. 

    Energy (loss) at epoch 32 is -3.398615598678589. 

    Energy (loss) at epoch 33 is -3.4184646606445312. 

    Energy (loss) at epoch 34 is -3.413381576538086. 

    Energy (loss) at epoch 35 is -3.403524875640869. 

    Energy (loss) at epoch 36 is -3.3957061767578125. 

    Energy (loss) at epoch 37 is -3.39630389213562. 

    Energy (loss) at epoch 38 is -3.4091012477874756. 

    Energy (loss) at epoch 39 is -3.417402744293213. 

    Energy (loss) at epoch 40 is -3.421114921569824. 

    Energy (loss) at epoch 41 is -3.420868158340454. 

    Energy (loss) at epoch 42 is -3.4125466346740723. 

    Energy (loss) at epoch 43 is -3.410649299621582. 

    Energy (loss) at epoch 44 is -3.415853500366211. 

    Energy (loss) at epoch 45 is -3.4211537837982178. 

    Energy (loss) at epoch 46 is -3.4251151084899902. 

    Energy (loss) at epoch 47 is -3.4230732917785645. 

    Energy (loss) at epoch 48 is -3.420961618423462. 

    Energy (loss) at epoch 49 is -3.420910596847534. 

    Energy (loss) at epoch 50 is -3.420926094055176. 

    Energy (loss) at epoch 51 is -3.424203395843506. 

    Energy (loss) at epoch 52 is -3.4257071018218994. 

    Energy (loss) at epoch 53 is -3.4251558780670166. 

    Energy (loss) at epoch 54 is -3.42510986328125. 

    Energy (loss) at epoch 55 is -3.4247026443481445. 

    Energy (loss) at epoch 56 is -3.425546407699585. 

    Energy (loss) at epoch 57 is -3.4255588054656982. 

    Energy (loss) at epoch 58 is -3.4259064197540283. 

    Energy (loss) at epoch 59 is -3.426995277404785. 

    Energy (loss) at epoch 60 is -3.4268343448638916. 

    Energy (loss) at epoch 61 is -3.427072763442993. 

    Energy (loss) at epoch 62 is -3.4268462657928467. 

    Energy (loss) at epoch 63 is -3.426736354827881. 

    Energy (loss) at epoch 64 is -3.42704701423645. 

    Energy (loss) at epoch 65 is -3.4274044036865234. 

    Energy (loss) at epoch 66 is -3.428107261657715. 

    Energy (loss) at epoch 67 is -3.427821159362793. 

    Energy (loss) at epoch 68 is -3.427600860595703. 

    Energy (loss) at epoch 69 is -3.4275050163269043. 

    Energy (loss) at epoch 70 is -3.4276251792907715. 

    Energy (loss) at epoch 71 is -3.4281117916107178. 

    Energy (loss) at epoch 72 is -3.428297281265259. 

    Energy (loss) at epoch 73 is -3.428323745727539. 

    Energy (loss) at epoch 74 is -3.427931547164917. 

    Energy (loss) at epoch 75 is -3.427931785583496. 

    Energy (loss) at epoch 76 is -3.428152561187744. 

    Energy (loss) at epoch 77 is -3.428378105163574. 

    Energy (loss) at epoch 78 is -3.4284985065460205. 

    Energy (loss) at epoch 79 is -3.428347110748291. 





.. GENERATED FROM PYTHON SOURCE LINES 103-116

.. code-block:: default

    Ising_H = TTMatrix(Ising_H).to_matrix()
    true_energies, _ = tl.eigh(Ising_H)
    ground_state_energy = true_energies[0]
    plt.figure()
    plt.plot(energy_vec.detach().numpy(), color='r')
    plt.hlines(ground_state_energy, 0, nepochs, color='k', linestyle='--')
    plt.xlabel('Epochs')
    plt.ylabel('Energy')
    plt.xticks()
    plt.yticks()
    plt.legend(['Variational Solution', 'Ground Truth'])
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :alt: plot vqe transverse field Ising
   :srcset: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 117-120

References
----------
.. [1] Peruzzo, A., McClean, J., Shadbolt, P. et al. A variational eigenvalue solver on a photonic quantum processor. Nat Commun 5, 4213 (2014). 


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.544 seconds)


.. _sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_vqe_transverse_field_Ising.py <plot_vqe_transverse_field_Ising.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_vqe_transverse_field_Ising.ipynb <plot_vqe_transverse_field_Ising.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
